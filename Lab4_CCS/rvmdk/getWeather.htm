<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\rvmdk\getWeather.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\rvmdk\getWeather.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Sat Feb 17 17:44:13 2018
<BR><P>
<H3>Maximum Stack Usage =        752 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; configureSimpleLinkToDefaultState &rArr; sl_NetAppMDNSUnRegisterService &rArr; sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8b]">Reset_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[19]">ADC0Seq0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">ADC0Seq0_Handler</a><BR>
 <LI><a href="#[8f]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8f]">SysCtlDelay</a><BR>
 <LI><a href="#[b6]">fillmessage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b6]">fillmessage</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[19]">ADC0Seq0_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1a]">ADC0Seq1_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1b]">ADC0Seq2_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1c]">ADC0Seq3_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3b]">ADC1Seq0_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3c]">ADC1Seq1_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3d]">ADC1Seq2_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3e]">ADC1Seq3_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[32]">CAN0_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[33]">CAN1_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[34]">CAN2_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[24]">Comp0_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[25]">Comp1_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[26]">Comp2_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[35]">Ethernet_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[40]">ExtBus_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5d]">FPU_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[65]">Fan0_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[28]">FlashCtl_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[b]">GPIOPortA_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[c]">GPIOPortB_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[d]">GPIOPortC_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[e]">GPIOPortD_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[f]">GPIOPortE_Handler</a> from switch.o(i.GPIOPortE_Handler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[29]">GPIOPortF_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2a]">GPIOPortG_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2b]">GPIOPortH_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[41]">GPIOPortJ_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[42]">GPIOPortK_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[43]">GPIOPortL_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[62]">GPIOPortM_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[63]">GPIOPortN_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[67]">GPIOPortP1_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[68]">GPIOPortP2_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[69]">GPIOPortP3_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6a]">GPIOPortP4_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6b]">GPIOPortP5_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6c]">GPIOPortP6_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6d]">GPIOPortP7_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[66]">GPIOPortP_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6f]">GPIOPortQ1_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[70]">GPIOPortQ2_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[71]">GPIOPortQ3_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[72]">GPIOPortQ4_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[73]">GPIOPortQ5_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[74]">GPIOPortQ6_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[75]">GPIOPortQ7_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6e]">GPIOPortQ_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[76]">GPIOPortR_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[77]">GPIOPortS_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[36]">Hibernate_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[13]">I2C0_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[30]">I2C1_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4b]">I2C2_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4c]">I2C3_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[60]">I2C4_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[61]">I2C5_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3f]">I2S0_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5f]">LPC0_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5e]">PECI0_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[14]">PWM0Fault_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[15]">PWM0Generator0_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[16]">PWM0Generator1_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[17]">PWM0Generator2_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[38]">PWM0Generator3_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[7c]">PWM1Fault_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[78]">PWM1Generator0_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[79]">PWM1Generator1_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[7a]">PWM1Generator2_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[7b]">PWM1Generator3_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[18]">Quadrature0_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[31]">Quadrature1_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[64]">Quadrature2_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[8b]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[12]">SSI0_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2d]">SSI1_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[44]">SSI2_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[45]">SSI3_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[81]">SimpleLinkNetAppEventHandler</a> from main.o(i.SimpleLinkNetAppEventHandler) referenced from driver.o(i._SlDrvClassifyRxMsg)
 <LI><a href="#[80]">SimpleLinkWlanEventHandler</a> from main.o(i.SimpleLinkWlanEventHandler) referenced from driver.o(i._SlDrvClassifyRxMsg)
 <LI><a href="#[27]">SysCtl_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from systick.o(i.SysTick_Handler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1e]">Timer0A_Handler</a> from sound.o(i.Timer0A_Handler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1f]">Timer0B_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[20]">Timer1A_Handler</a> from timer1.o(i.Timer1A_Handler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[21]">Timer1B_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[22]">Timer2A_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[23]">Timer2B_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2e]">Timer3A_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2f]">Timer3B_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4d]">Timer4A_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4e]">Timer4B_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4f]">Timer5A_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[50]">Timer5B_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[10]">UART0_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[11]">UART1_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2c]">UART2_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[46]">UART3_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[47]">UART4_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[48]">UART5_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[49]">UART6_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4a]">UART7_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[37]">USB0_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1d]">WDT_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[51]">WideTimer0A_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[52]">WideTimer0B_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[53]">WideTimer1A_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[54]">WideTimer1B_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[55]">WideTimer2A_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[56]">WideTimer2B_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[57]">WideTimer3A_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[58]">WideTimer3B_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[59]">WideTimer4A_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5a]">WideTimer4B_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5b]">WideTimer5A_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5c]">WideTimer5B_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[7f]">_SlDrvDeviceEventHandler</a> from device.o(i._SlDrvDeviceEventHandler) referenced from driver.o(i._SlDrvClassifyRxMsg)
 <LI><a href="#[82]">_SlDrvMsgReadSpawnCtx</a> from driver.o(i._SlDrvMsgReadSpawnCtx) referenced from driver.o(i._SlDrvMsgReadCmdCtx)
 <LI><a href="#[82]">_SlDrvMsgReadSpawnCtx</a> from driver.o(i._SlDrvMsgReadSpawnCtx) referenced from driver.o(i._SlDrvRxIrqHandler)
 <LI><a href="#[7e]">_SlDrvNetAppEventHandler</a> from netapp.o(i._SlDrvNetAppEventHandler) referenced from driver.o(i._SlDrvClassifyRxMsg)
 <LI><a href="#[83]">_SlDrvRxIrqHandler</a> from driver.o(i._SlDrvRxIrqHandler) referenced from device.o(i.sl_Start)
 <LI><a href="#[84]">_sl_HandleAsync_Accept</a> from socket.o(i._sl_HandleAsync_Accept) referenced from driver.o(.constdata)
 <LI><a href="#[85]">_sl_HandleAsync_Connect</a> from socket.o(i._sl_HandleAsync_Connect) referenced from driver.o(.constdata)
 <LI><a href="#[87]">_sl_HandleAsync_DnsGetHostByName</a> from netapp.o(i._sl_HandleAsync_DnsGetHostByName) referenced from driver.o(.constdata)
 <LI><a href="#[88]">_sl_HandleAsync_DnsGetHostByService</a> from netapp.o(i._sl_HandleAsync_DnsGetHostByService) referenced from driver.o(.constdata)
 <LI><a href="#[89]">_sl_HandleAsync_PingResponse</a> from netapp.o(i._sl_HandleAsync_PingResponse) referenced from driver.o(.constdata)
 <LI><a href="#[86]">_sl_HandleAsync_Select</a> from socket.o(i._sl_HandleAsync_Select) referenced from driver.o(.constdata)
 <LI><a href="#[8a]">_sl_HandleAsync_Stop</a> from device.o(i._sl_HandleAsync_Stop) referenced from driver.o(.constdata)
 <LI><a href="#[7d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3a]">uDMA_Error</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[39]">uDMA_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8b]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ADC0Seq0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC0Seq1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC0Seq2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0Seq3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ADC1Seq0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC1Seq1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC1Seq2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ADC1Seq3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Comp0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Comp1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Comp2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>Ethernet_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>ExtBus_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>FPU_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>Fan0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>FlashCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIOPortA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIOPortB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOPortC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOPortD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPIOPortF_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPIOPortG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>GPIOPortH_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPIOPortJ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>GPIOPortK_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>GPIOPortL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIOPortM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIOPortN_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIOPortP1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIOPortP2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIOPortP3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIOPortP4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIOPortP5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIOPortP6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIOPortP7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIOPortP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIOPortQ1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIOPortQ2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIOPortQ3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIOPortQ4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPIOPortQ5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GPIOPortQ6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>GPIOPortQ7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOPortQ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>GPIOPortR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>GPIOPortS_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>Hibernate_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>I2C0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2S0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>LPC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>PECI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PWM0Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PWM0Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM0Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM0Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PWM0Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>PWM1Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>PWM1Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>PWM1Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>PWM1Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>PWM1Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Quadrature0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>Quadrature1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>Quadrature2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SSI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SSI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SSI2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SSI3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SysCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Timer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Timer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Timer2A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Timer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>Timer3A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>Timer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>Timer4A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>Timer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>Timer5A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>Timer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USB0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>WideTimer0A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>WideTimer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>WideTimer1A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>WideTimer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>WideTimer2A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WideTimer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WideTimer3A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>WideTimer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>WideTimer4A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>WideTimer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>WideTimer5A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>WideTimer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>uDMA_Error</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>uDMA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rvmdk.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[11f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[93]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[120]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[121]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[122]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[123]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[124]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[8f]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
</UL>

<P><STRONG><a name="[125]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[126]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[a5]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[127]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[128]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[129]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[10f]"></a>localtime</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTime
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByService
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanConnect
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppSendTokenValue
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanConnect
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[103]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[12e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__decompress2</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>ADC0_InitSWTriggerSeq3_Ch9</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, adcswtrigger.o(i.ADC0_InitSWTriggerSeq3_Ch9))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>Buttons_Arm</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, switch.o(i.Buttons_Arm))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1A_Handler
</UL>

<P><STRONG><a name="[94]"></a>CC3100_InterruptDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(i.CC3100_InterruptDisable))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Close
</UL>

<P><STRONG><a name="[96]"></a>CC3100_InterruptEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(i.CC3100_InterruptEnable))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[98]"></a>CC3100_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board.o(i.CC3100_disable))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[9a]"></a>CC3100_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board.o(i.CC3100_enable))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[ed]"></a>CopyPingResultsToReport</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, netapp.o(i.CopyPingResultsToReport))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
</UL>

<P><STRONG><a name="[9b]"></a>Crash</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.Crash))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_RedToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>DAC_Out</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dac.o(i.DAC_Out))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0A_Handler
</UL>

<P><STRONG><a name="[ee]"></a>Delay1ms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, st7735.o(i.Delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>

<P><STRONG><a name="[fd]"></a>FPUEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fpu.o(i.FPUEnable))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClk
</UL>

<P><STRONG><a name="[fe]"></a>FPULazyStackingEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fpu.o(i.FPULazyStackingEnable))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClk
</UL>

<P><STRONG><a name="[9e]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>

<P><STRONG><a name="[11b]"></a>GPIOIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[95]"></a>GPIOIntDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_InterruptDisable
</UL>

<P><STRONG><a name="[97]"></a>GPIOIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_InterruptEnable
</UL>

<P><STRONG><a name="[11a]"></a>GPIOIntTypeSet</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[9f]"></a>GPIOPadConfigSet</STRONG> (Thumb, 314 bytes, Stack size 28 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>

<P><STRONG><a name="[c7]"></a>GPIOPinConfigure</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[9d]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[a0]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[a1]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[a2]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[99]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_enable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_disable
</UL>

<P><STRONG><a name="[f]"></a>GPIOPortE_Handler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, switch.o(i.GPIOPortE_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOPortE_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>GetStartResponseConvert</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, device.o(i.GetStartResponseConvert))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[11c]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[a4]"></a>IntMasterEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[110]"></a>LED_GreenOn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led.o(i.LED_GreenOn))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
</UL>

<P><STRONG><a name="[ff]"></a>LED_Init</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, led.o(i.LED_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>LED_RedToggle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led.o(i.LED_RedToggle))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crash
</UL>

<P><STRONG><a name="[118]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ssi.o(i.SSIConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[11e]"></a>SSIDataGetNonBlocking</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssi.o(i.SSIDataGetNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
</UL>

<P><STRONG><a name="[11d]"></a>SSIDataPutNonBlocking</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssi.o(i.SSIDataPutNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
</UL>

<P><STRONG><a name="[119]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[a6]"></a>ST7735_DrawCharS</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, st7735.o(i.ST7735_DrawCharS))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutUDec
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
</UL>

<P><STRONG><a name="[a8]"></a>ST7735_DrawPixel</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, st7735.o(i.ST7735_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>

<P><STRONG><a name="[ab]"></a>ST7735_DrawString</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, st7735.o(i.ST7735_DrawString))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutUDec
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
</UL>

<P><STRONG><a name="[a7]"></a>ST7735_FillRect</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, st7735.o(i.ST7735_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>

<P><STRONG><a name="[ad]"></a>ST7735_FillScreen</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st7735.o(i.ST7735_FillScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>ST7735_InitR</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, st7735.o(i.ST7735_InitR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ST7735_InitR &rArr; commonInit &rArr; commandList &rArr; Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>ST7735_OutChar</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, st7735.o(i.ST7735_OutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayBuffer
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutString
</UL>

<P><STRONG><a name="[b4]"></a>ST7735_OutString</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, st7735.o(i.ST7735_OutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ST7735_OutString &rArr; ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayBuffer
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayTime
</UL>

<P><STRONG><a name="[b5]"></a>ST7735_OutUDec</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, st7735.o(i.ST7735_OutUDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ST7735_OutUDec &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayTime
</UL>

<P><STRONG><a name="[b2]"></a>ST7735_SetCursor</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, st7735.o(i.ST7735_SetCursor))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayTime
</UL>

<P><STRONG><a name="[b7]"></a>SimpleLinkHttpServerCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.SimpleLinkHttpServerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SimpleLinkHttpServerCallback &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>

<P><STRONG><a name="[81]"></a>SimpleLinkNetAppEventHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.SimpleLinkNetAppEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SimpleLinkNetAppEventHandler &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(i._SlDrvClassifyRxMsg)
</UL>
<P><STRONG><a name="[80]"></a>SimpleLinkWlanEventHandler</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(i.SimpleLinkWlanEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SimpleLinkWlanEventHandler &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(i._SlDrvClassifyRxMsg)
</UL>
<P><STRONG><a name="[b9]"></a>Sound_Play</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sound.o(i.Sound_Play))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Vader
</UL>

<P><STRONG><a name="[bb]"></a>Sound_Vader</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sound.o(i.Sound_Vader))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0A_Handler
</UL>

<P><STRONG><a name="[117]"></a>SysCtlClockGet</STRONG> (Thumb, 314 bytes, Stack size 12 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
</UL>

<P><STRONG><a name="[bc]"></a>SysCtlClockSet</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClk
</UL>

<P><STRONG><a name="[c6]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, systick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Timer0A_Handler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sound.o(i.Timer0A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer0A_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0A_Stop
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Vader
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>Timer0A_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer0.o(i.Timer0A_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0A_Handler
</UL>

<P><STRONG><a name="[ba]"></a>Timer0_Init</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, timer0.o(i.Timer0_Init))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Play
</UL>

<P><STRONG><a name="[20]"></a>Timer1A_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer1.o(i.Timer1A_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buttons_Arm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>Timer1_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, timer1.o(i.Timer1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortE_Handler
</UL>

<P><STRONG><a name="[c4]"></a>UARTFlushRx</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uartstdio.o(i.UARTFlushRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTFlushRx
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>

<P><STRONG><a name="[c0]"></a>UARTFlushTx</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uartstdio.o(i.UARTFlushTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTFlushTx
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>

<P><STRONG><a name="[c3]"></a>UARTStdioConfig</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, uartstdio.o(i.UARTStdioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTStdioConfig &rArr; UARTFlushTx
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushRx
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[c5]"></a>UART_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Init &rArr; UARTStdioConfig &rArr; UARTFlushTx
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>UARTprintf</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, uartstdio.o(i.UARTprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UARTprintf &rArr; UARTvprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTvprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkWlanEventHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkNetAppEventHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkHttpServerCallback
</UL>

<P><STRONG><a name="[c8]"></a>UARTvprintf</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, uartstdio.o(i.UARTvprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UARTvprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>

<P><STRONG><a name="[c9]"></a>UARTwrite</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, uartstdio.o(i.UARTwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferFull
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTvprintf
</UL>

<P><STRONG><a name="[cb]"></a>_SlAsyncEventGenericHandler</STRONG> (Thumb, 732 bytes, Stack size 176 bytes, driver.o(i._SlAsyncEventGenericHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
</UL>

<P><STRONG><a name="[cf]"></a>_SlDrvBasicCmd</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, driver.o(i._SlDrvBasicCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _SlDrvBasicCmd &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanDisconnect
</UL>

<P><STRONG><a name="[e3]"></a>_SlDrvClassifyRxMsg</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, driver.o(i._SlDrvClassifyRxMsg))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[d0]"></a>_SlDrvCmdOp</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, driver.o(i._SlDrvCmdOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvBasicCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSetMode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSet
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanProfileDel
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanPolicySet
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanConnect
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Socket
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetCfgSet
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_DevGet
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Close
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
</UL>

<P><STRONG><a name="[d5]"></a>_SlDrvCmdSend</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, driver.o(i._SlDrvCmdSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _SlDrvCmdSend &rArr; _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppSendTokenValue
</UL>

<P><STRONG><a name="[d6]"></a>_SlDrvDataReadOp</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, driver.o(i._SlDrvDataReadOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _SlDrvDataReadOp &rArr; _SlDrvWaitForPoolObj &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Recv
</UL>

<P><STRONG><a name="[d9]"></a>_SlDrvDataWriteOp</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, driver.o(i._SlDrvDataWriteOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _SlDrvDataWriteOp &rArr; _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Send
</UL>

<P><STRONG><a name="[7f]"></a>_SlDrvDeviceEventHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, device.o(i._SlDrvDeviceEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _SlDrvDeviceEventHandler &rArr; _sl_HandleAsync_InitComplete &rArr; _SlDrvReleasePoolObj &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Stop
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(i._SlDrvClassifyRxMsg)
</UL>
<P><STRONG><a name="[db]"></a>_SlDrvDriverCBDeinit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, driver.o(i._SlDrvDriverCBDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _SlDrvDriverCBDeinit &rArr; _SlDrvFlowContDeinit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvFlowContDeinit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjDeInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
</UL>

<P><STRONG><a name="[de]"></a>_SlDrvDriverCBInit</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, driver.o(i._SlDrvDriverCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _SlDrvDriverCBInit &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvFlowContInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvObjInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[dc]"></a>_SlDrvFlowContDeinit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, flowcont.o(i._SlDrvFlowContDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SlDrvFlowContDeinit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBDeinit
</UL>

<P><STRONG><a name="[e0]"></a>_SlDrvFlowContInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, flowcont.o(i._SlDrvFlowContInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SlDrvFlowContInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
</UL>

<P><STRONG><a name="[e1]"></a>_SlDrvMsgRead</STRONG> (Thumb, 834 bytes, Stack size 40 bytes, driver.o(i._SlDrvMsgRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _SlDrvMsgRead &rArr; _SlDrvRxHdrRead &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlFindAndSetActiveObj
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxHdrRead
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvClassifyRxMsg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
</UL>

<P><STRONG><a name="[d4]"></a>_SlDrvMsgReadCmdCtx</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, driver.o(i._SlDrvMsgReadCmdCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSpawn
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[82]"></a>_SlDrvMsgReadSpawnCtx</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, driver.o(i._SlDrvMsgReadSpawnCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _SlDrvMsgReadSpawnCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Address Reference Count : 2]<UL><LI> driver.o(i._SlDrvMsgReadCmdCtx)
<LI> driver.o(i._SlDrvRxIrqHandler)
</UL>
<P><STRONG><a name="[d2]"></a>_SlDrvMsgWrite</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, driver.o(i._SlDrvMsgWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdSend
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>

<P><STRONG><a name="[7e]"></a>_SlDrvNetAppEventHandler</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, netapp.o(i._SlDrvNetAppEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _SlDrvNetAppEventHandler &rArr; SimpleLinkHttpServerCallback &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByService
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleLinkHttpServerCallback
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppSendTokenValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(i._SlDrvClassifyRxMsg)
</UL>
<P><STRONG><a name="[dd]"></a>_SlDrvObjDeInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, driver.o(i._SlDrvObjDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBDeinit
</UL>

<P><STRONG><a name="[df]"></a>_SlDrvObjInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, driver.o(i._SlDrvObjInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SlDrvObjInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
</UL>

<P><STRONG><a name="[d8]"></a>_SlDrvReleasePoolObj</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, driver.o(i._SlDrvReleasePoolObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _SlDrvReleasePoolObj &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlRemoveFromList
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
</UL>

<P><STRONG><a name="[e2]"></a>_SlDrvRxHdrRead</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, driver.o(i._SlDrvRxHdrRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _SlDrvRxHdrRead &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvShiftDWord
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[83]"></a>_SlDrvRxIrqHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, driver.o(i._SlDrvRxIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _SlDrvRxIrqHandler &rArr; _SlNonOsSpawn
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSpawn
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(i.sl_Start)
</UL>
<P><STRONG><a name="[ea]"></a>_SlDrvShiftDWord</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, driver.o(i._SlDrvShiftDWord))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxHdrRead
</UL>

<P><STRONG><a name="[d7]"></a>_SlDrvWaitForPoolObj</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, driver.o(i._SlDrvWaitForPoolObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _SlDrvWaitForPoolObj &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
</UL>

<P><STRONG><a name="[e5]"></a>_SlFindAndSetActiveObj</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, driver.o(i._SlFindAndSetActiveObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _SlFindAndSetActiveObj
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[eb]"></a>_SlNonOsMainLoopTask</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nonos.o(i._SlNonOsMainLoopTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _SlNonOsMainLoopTask
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>_SlNonOsSemGet</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nonos.o(i._SlNonOsSemGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsMainLoopTask
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Select
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Connect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Accept
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Stop
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
</UL>

<P><STRONG><a name="[d3]"></a>_SlNonOsSemSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nonos.o(i._SlNonOsSemSet))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Select
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_PingResponse
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByService
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_DnsGetHostByName
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Connect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Accept
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvFlowContInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvFlowContDeinit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadSpawnCtx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxIrqHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBDeinit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_Stop
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_HandleAsync_InitComplete
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
</UL>

<P><STRONG><a name="[e6]"></a>_SlNonOsSpawn</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, nonos.o(i._SlNonOsSpawn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _SlNonOsSpawn
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgReadCmdCtx
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxIrqHandler
</UL>

<P><STRONG><a name="[e9]"></a>_SlRemoveFromList</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, driver.o(i._SlRemoveFromList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _SlRemoveFromList
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
</UL>

<P><STRONG><a name="[131]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[132]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[133]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[111]"></a>_sl_BuildAddress</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, socket.o(i._sl_BuildAddress))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
</UL>

<P><STRONG><a name="[84]"></a>_sl_HandleAsync_Accept</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, socket.o(i._sl_HandleAsync_Accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sl_HandleAsync_Accept &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>_sl_HandleAsync_Connect</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, socket.o(i._sl_HandleAsync_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sl_HandleAsync_Connect &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>_sl_HandleAsync_DnsGetHostByName</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, netapp.o(i._sl_HandleAsync_DnsGetHostByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sl_HandleAsync_DnsGetHostByName &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>_sl_HandleAsync_DnsGetHostByService</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, netapp.o(i._sl_HandleAsync_DnsGetHostByService))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sl_HandleAsync_DnsGetHostByService
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>_sl_HandleAsync_InitComplete</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, device.o(i._sl_HandleAsync_InitComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _sl_HandleAsync_InitComplete &rArr; _SlDrvReleasePoolObj &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartResponseConvert
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDeviceEventHandler
</UL>

<P><STRONG><a name="[89]"></a>_sl_HandleAsync_PingResponse</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, netapp.o(i._sl_HandleAsync_PingResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyPingResultsToReport
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlAsyncEventGenericHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>_sl_HandleAsync_Select</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, socket.o(i._sl_HandleAsync_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sl_HandleAsync_Select &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>_sl_HandleAsync_Stop</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, device.o(i._sl_HandleAsync_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sl_HandleAsync_Stop &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDeviceEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>_sl_TruncatePayloadByProtocol</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, socket.o(i._sl_TruncatePayloadByProtocol))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Send
</UL>

<P><STRONG><a name="[10e]"></a>convertToNumber</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, addon.o(i.convertToNumber))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTime
</UL>

<P><STRONG><a name="[fa]"></a>displayBuffer</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, addon.o(i.displayBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = displayBuffer &rArr; ST7735_OutString &rArr; ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutString
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>displayTime</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, addon.o(i.displayTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = displayTime &rArr; ST7735_OutString &rArr; ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutUDec
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutString
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTime
</UL>

<P><STRONG><a name="[b6]"></a>fillmessage</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, st7735.o(i.fillmessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = fillmessage &rArr;  fillmessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutUDec
</UL>

<P><STRONG><a name="[fc]"></a>initClk</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, board.o(i.initClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initClk &rArr; SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPULazyStackingEnable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPUEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>main</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = main &rArr; configureSimpleLinkToDefaultState &rArr; sl_NetAppMDNSUnRegisterService &rArr; sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanConnect
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Socket
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Send
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Recv
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Htons
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Htonl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Close
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTime
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClk
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayBuffer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsMainLoopTask
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_InitSWTriggerSeq3_Ch9
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crash
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[10c]"></a>parseTime</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, addon.o(i.parseTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = parseTime &rArr; displayTime &rArr; ST7735_OutString &rArr; ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayTime
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertToNumber
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>registerInterruptHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(i.registerInterruptHandler))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[10d]"></a>sendDataToServer</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, main.o(i.sendDataToServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = sendDataToServer &rArr; sl_NetAppDnsGetHostByName &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Socket
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Send
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Recv
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppDnsGetHostByName
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Htons
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Htonl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Connect
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Close
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GreenOn
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>sl_Close</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, socket.o(i.sl_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sl_Close &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>sl_Connect</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, socket.o(i.sl_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sl_Connect &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_BuildAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>sl_DevGet</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, device.o(i.sl_DevGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sl_DevGet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[106]"></a>sl_Htonl</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, socket.o(i.sl_Htonl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sl_Htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>sl_Htons</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, socket.o(i.sl_Htons))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sl_Htons
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>sl_NetAppDnsGetHostByName</STRONG> (Thumb, 202 bytes, Stack size 88 bytes, netapp.o(i.sl_NetAppDnsGetHostByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = sl_NetAppDnsGetHostByName &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>sl_NetAppMDNSRegisterUnregisterService</STRONG> (Thumb, 118 bytes, Stack size 312 bytes, netapp.o(i.sl_NetAppMDNSRegisterUnregisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSUnRegisterService
</UL>

<P><STRONG><a name="[f9]"></a>sl_NetAppMDNSUnRegisterService</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, netapp.o(i.sl_NetAppMDNSUnRegisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = sl_NetAppMDNSUnRegisterService &rArr; sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSRegisterUnregisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[e8]"></a>sl_NetAppSendTokenValue</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, netapp.o(i.sl_NetAppSendTokenValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sl_NetAppSendTokenValue &rArr; _SlDrvCmdSend &rArr; _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdSend
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvNetAppEventHandler
</UL>

<P><STRONG><a name="[f7]"></a>sl_NetCfgSet</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, netcfg.o(i.sl_NetCfgSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sl_NetCfgSet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[10a]"></a>sl_Recv</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, socket.o(i.sl_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sl_Recv &rArr; _SlDrvDataReadOp &rArr; _SlDrvWaitForPoolObj &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>sl_Send</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, socket.o(i.sl_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sl_Send &rArr; _SlDrvDataWriteOp &rArr; _SlDrvMsgWrite &rArr; spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDataWriteOp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sl_TruncatePayloadByProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>sl_Socket</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, socket.o(i.sl_Socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sl_Socket &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataToServer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>sl_Start</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, device.o(i.sl_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sl_Start &rArr; _SlDrvWaitForPoolObj &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Open
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartResponseConvert
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerInterruptHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_enable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[f2]"></a>sl_Stop</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, device.o(i.sl_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sl_Stop &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_Close
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemSet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlNonOsSemGet
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvWaitForPoolObj
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvReleasePoolObj
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvDriverCBDeinit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerInterruptHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[101]"></a>sl_WlanConnect</STRONG> (Thumb, 414 bytes, Stack size 216 bytes, wlan.o(i.sl_WlanConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = sl_WlanConnect &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>sl_WlanDisconnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wlan.o(i.sl_WlanDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sl_WlanDisconnect &rArr; _SlDrvBasicCmd &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvBasicCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[f4]"></a>sl_WlanPolicySet</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, wlan.o(i.sl_WlanPolicySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sl_WlanPolicySet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[f5]"></a>sl_WlanProfileDel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wlan.o(i.sl_WlanProfileDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sl_WlanProfileDel &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[f8]"></a>sl_WlanSet</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, wlan.o(i.sl_WlanSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = sl_WlanSet &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[f1]"></a>sl_WlanSetMode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wlan.o(i.sl_WlanSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = sl_WlanSetMode &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvCmdOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureSimpleLinkToDefaultState
</UL>

<P><STRONG><a name="[116]"></a>spi_Close</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(i.spi_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_InterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
</UL>

<P><STRONG><a name="[114]"></a>spi_Open</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, spi.o(i.spi_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spi_Open &rArr; GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC3100_InterruptEnable
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
</UL>

<P><STRONG><a name="[e4]"></a>spi_Read</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, spi.o(i.spi_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPutNonBlocking
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGetNonBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxHdrRead
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgRead
</UL>

<P><STRONG><a name="[e7]"></a>spi_Write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, spi.o(i.spi_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPutNonBlocking
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGetNonBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvRxHdrRead
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SlDrvMsgWrite
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ef]"></a>configureSimpleLinkToDefaultState</STRONG> (Thumb, 252 bytes, Stack size 80 bytes, main.o(i.configureSimpleLinkToDefaultState))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = configureSimpleLinkToDefaultState &rArr; sl_NetAppMDNSUnRegisterService &rArr; sl_NetAppMDNSRegisterUnregisterService &rArr; _SlDrvCmdOp &rArr; _SlDrvMsgReadCmdCtx &rArr; _SlAsyncEventGenericHandler &rArr; _sl_HandleAsync_PingResponse &rArr; _SlNonOsSemGet &rArr; _SlNonOsMainLoopTask
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSetMode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanSet
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanProfileDel
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanPolicySet
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_WlanDisconnect
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Stop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_Start
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetCfgSet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_NetAppMDNSUnRegisterService
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl_DevGet
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>IsBufferEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uartstdio.o(i.IsBufferEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
</UL>

<P><STRONG><a name="[ca]"></a>IsBufferFull</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uartstdio.o(i.IsBufferFull))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>

<P><STRONG><a name="[c2]"></a>UARTPrimeTransmit</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, uartstdio.o(i.UARTPrimeTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTPrimeTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>

<P><STRONG><a name="[b0]"></a>commandList</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, st7735.o(i.commandList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = commandList &rArr; Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1ms
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
</UL>

<P><STRONG><a name="[af]"></a>commonInit</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, st7735.o(i.commonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = commonInit &rArr; commandList &rArr; Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1ms
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[aa]"></a>pushColor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, st7735.o(i.pushColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pushColor
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>

<P><STRONG><a name="[a9]"></a>setAddrWindow</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, st7735.o(i.setAddrWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>

<P><STRONG><a name="[b1]"></a>writecommand</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, st7735.o(i.writecommand))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>

<P><STRONG><a name="[ac]"></a>writedata</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, st7735.o(i.writedata))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
